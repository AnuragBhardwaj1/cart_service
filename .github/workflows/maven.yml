# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

# notes: To set up maven package, following are the steps:
# 1. package with maven
# 2. Build and test Dockerfile
#    - installing essential libs[maven, git, jre]
#     - get the prerequisite for the libs like wget, tag, git
#     - get the compatible versions of jre-18.
# 3. Build docker images in ci
#   - use github actions to checkout, install and package.
#   - push the created image to dockerhub using credentials with action build-push-action.


name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: "us-west-2"                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: "arn:aws:ecs:us-west-2:331061725593:cluster/anurag-pathshala"           # set this to your Amazon ECR repository name
  ECS_SERVICE: "cart-service"                 # set this to your Amazon ECS service name
  ECS_CLUSTER: "anurag-pathshala"                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: "arn:aws:ecs:us-west-2:331061725593:task-definition/ctdf-yccoe-chrome-devtools-login-hidden-pwd:1" # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: "yccoe-chrome-devtools-login-hidden-pwd-container"           # set this to the name of the container in the
  # containerDefinitions section of your task definition

jobs:

  build:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 18
      uses: actions/setup-java@v3
      with:
        java-version: '18'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Set up Docker Build
      uses: docker/setup-buildx-action@v2
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: anuragbhardwaj/cart_service:latest
  # This workflow uses actions that are not certified by GitHub.
  # They are provided by a third-party and are governed by
  # separate terms of service, privacy policy, and support
  # documentation.

  # GitHub recommends pinning actions to a commit SHA.
  # To get a newer version, you will need to update the SHA.
  # You can also reference a tag or branch, but the action may change without warning.
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
#          image: ${{ steps.build-image.outputs.image }}
          image: anuragbhardwaj/cart_service:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
